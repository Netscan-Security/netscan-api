import { Inject, Injectable } from '@nestjs/common';
import { PostgresJsDatabase } from 'drizzle-orm/postgres-js';
import { DRIZZLE_ORM } from 'src/core/constants/db.constants';
import * as schema from '../../modules/drizzle/schema';
import { eq } from 'drizzle-orm';
import { CreateVulnerabilityDto } from 'src/interfaces/dtos/vulnerabilities.dto';

@Injectable()
export class VulnerabilityService {
  constructor(
    @Inject(DRIZZLE_ORM) private db: PostgresJsDatabase<typeof schema>,
  ) {}

  async create(data: CreateVulnerabilityDto): Promise<any> {
    // check if host exists
    const isHostExists = await this.findByHostId(data.hostId);
    if (!isHostExists) {
      throw new Error('Host does not exist');
    }

    const result = await this.db
      .insert(schema.vulnerabilities)
      .values(data)
      .returning()
      .execute();

    return result[0];
  }

  async findById(id: string) {
    return this.db.query.vulnerabilities.findFirst({
      where: eq(schema.vulnerabilities.id, id),
    });
  }

  // find by hostId
  async findByHostId(hostId: string) {
    return this.db.query.vulnerabilities.findMany({
      where: eq(schema.vulnerabilities.hostId, hostId),
    });
  }

  async findAll() {
    return this.db.query.vulnerabilities.findMany({});
  }
}
